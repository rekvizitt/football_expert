import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import datetime
from src.api import FootballExpertApi
from src.logger import logger

leagues = ["ENG-Premier League", "ESP-La Liga", "FRA-Ligue 1", "GER-Bundesliga", "ITA-Serie A"]
seasons = ["2425"]
api = FootballExpertApi(leagues, seasons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π."
        "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
        "\n<b>/start</b> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"
        "\n<b>/leagues</b> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–≥"
        "\n<b>/matches</b> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π"
        "\n<b>/predict</b> –∫–æ–º–∞–Ω–¥–∞_–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞_–≥–æ—Å—Ç–µ–π - –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞"
        "\n<b>/metrics</b> - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π"
    )

async def matches_command(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—ç—à–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
    matches = api.upcoming_matches
    if matches is None or matches.empty:
        await update.message.reply_text("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ –ª–∏–≥–∞–º
    leagues = matches['league'].unique()
    keyboard = []

    for league in leagues:
        league_matches = matches[matches['league'] == league]
        keyboard.append([InlineKeyboardButton(f"‚≠ê {league}", callback_data="noop")])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ª–∏–≥–∏

        for _, match in league_matches.iterrows():
            home_team = match["home_team"]
            away_team = match["away_team"]
            date_time = f"{match['date'].date()} {match['time']}"
            button_text = f"{home_team} vs {away_team} ({date_time})"
            callback_data = f"predict_{home_team}_{away_team}_{match['date'].date()}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", reply_markup=reply_markup)


async def leagues_command(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏."""
    leagues = api.leagues
    page_size = len(leagues)
    pages = [leagues[i:i + page_size] for i in range(0, len(leagues), page_size)]

    current_page = 0
    keyboard = []
    for league in pages[current_page]:
        keyboard.append([InlineKeyboardButton(league, callback_data=f"league_{league}")])

    if len(pages) > 1:
        if current_page > 0:
            keyboard.append([InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="prev_page")])
        if current_page < len(pages) - 1:
            keyboard.append([InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_page")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=reply_markup)


async def generate_match_prediction_response(home_team_name, away_team_name, date=None):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    if date == None:
        date = datetime.date.today()
    
    # Fetch match data
    match_data, encoded_match_data = api.get_match_data(home_team_name, away_team_name, date)
    if match_data is None:
        return f"<b>‚ùå –û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç—á–∞ {home_team_name} vs {away_team_name}."

    # Predict match results
    results = api.predictor.predict_and_determine_winner(encoded_match_data)
    combined_prediction_proba = results["combined_probabilities"]
    winner = results["winner"]

    # Calculate Poisson probabilities for exact score
    home_team_avg_goals = match_data['home_xg_last_5'].iloc[0]  
    away_team_avg_goals = match_data['away_xg_last_5'].iloc[0]
    poisson_probabilities = api.predictor.poisson_distribution(home_team_avg_goals, away_team_avg_goals)

    # Format the response
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    team_emoji = "‚öΩÔ∏è"
    vs_emoji = "üÜö"
    prediction_emoji = "üîÆ"
    stats_emoji = "üìä"
    winner_emoji = "üèÜ"
    score_emoji = "üéØ"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_emoji = {
        "home_win": "üè†",
        "draw": "ü§ù",
        "away_win": "‚úàÔ∏è"
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = (
        f"{prediction_emoji} <b>–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ú–ê–¢–ß–ê</b> {prediction_emoji}\n"
        f"{team_emoji} <b>{home_team_name}</b> {vs_emoji} <b>{away_team_name}</b>\n\n"
    )
    
    # –ü—Ä–æ–≥–Ω–æ–∑—ã –º–æ–¥–µ–ª–µ–π
    response += f"<b>ü§ñ –ü–†–û–ì–ù–û–ó–´ –ú–û–î–ï–õ–ï–ô:</b>\n"
    for model_name, prediction in results["predictions"].items():
        interpretation = api.predictor.interpret_prediction(prediction, home_team_name, away_team_name)
        response += f"‚Ä¢ <i>{model_name}</i>: {interpretation}\n"
    
    # –°—Ä–µ–¥–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    response += f"\n<b>{stats_emoji} –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –ò–°–•–û–î–û–í:</b>\n"
    response += f"{result_emoji['home_win']} –ü–æ–±–µ–¥–∞ <b>{home_team_name}</b>: <code>{combined_prediction_proba['home_win']:.1%}</code>\n"
    response += f"{result_emoji['draw']} –ù–∏—á—å—è: <code>{combined_prediction_proba['draw']:.1%}</code>\n"
    response += f"{result_emoji['away_win']} –ü–æ–±–µ–¥–∞ <b>{away_team_name}</b>: <code>{combined_prediction_proba['away_win']:.1%}</code>\n"
    
    # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞
    response += f"\n<b>{winner_emoji} –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–´–ô –ò–°–•–û–î:</b>\n"
    response += f"<b>{winner}</b>\n"
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ç–æ—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    response += f"\n<b>{score_emoji} –í–ï–†–û–Ø–¢–ù–´–ô –°–ß–ï–¢ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—É–∞—Å—Å–æ–Ω–∞):</b>\n"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
    sorted_probabilities = sorted(poisson_probabilities.items(), key=lambda x: x[1], reverse=True)
    for i, (score, probability) in enumerate(sorted_probabilities[:5]):
        medal = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i]
        response += f"{medal} <b>{score[0]}:{score[1]}</b> ‚Äî <code>{probability*100:.1f}%</code>\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ
    response += "\n<i>–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª—è—Ö –∏ –∏–º–µ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä</i>"
    
    return response

async def predict_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–º–∞–Ω–¥."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    args = context.args
    if len(args) != 2:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /predict <–∫–æ–º–∞–Ω–¥–∞_–¥–æ–º–∞> <–∫–æ–º–∞–Ω–¥–∞_–≥–æ—Å—Ç–µ–π>"
        )
        return

    home_team_name, away_team_name = args[0], args[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞–Ω—ã –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
    if not home_team_name.strip() or not away_team_name.strip():
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    home_team_exists = api.find_team_name(home_team_name)
    away_team_exists = api.find_team_name(away_team_name)

    if not home_team_exists:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ –¥–æ–º–∞ '{home_team_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if not away_team_exists:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Å—Ç–µ–π '{away_team_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await generate_match_prediction_response(home_team_exists, away_team_exists)

    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if "–û—à–∏–±–∫–∞" in response:
        await update.message.reply_html(response)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    await update.message.reply_html(f"{response}", disable_web_page_preview=True)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞ –∏–ª–∏ –ª–∏–≥–∏."""
    query = update.callback_query
    await query.answer()

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data_parts = query.data.split("_")

    if data_parts[0] == "predict":
        if len(data_parts) != 4:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
            return

        _, home_team, away_team, date = data_parts

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await generate_match_prediction_response(home_team, away_team, date)

        if "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ" in response:
            await query.edit_message_text(text=response)
            return

        await query.edit_message_text(text=response, parse_mode="HTML")

    elif data_parts[0] == "league":  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏–≥–∞
        await league_handler(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ league_handler

    else:
        await query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")

async def league_handler(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏."""
    query = update.callback_query
    await query.answer()

    league = query.data[7:]  # –£–¥–∞–ª—è–µ–º "league_" –∏–∑ callback_data

    logger.info(f"Selected league: {league}")

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏–≥–∏
    matches = api.upcoming_matches[api.upcoming_matches['league'] == league]
    if matches is None or matches.empty:
        await query.edit_message_text(text=f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –≤ –ª–∏–≥–µ {league}.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
    keyboard = []
    for _, match in matches.iterrows():
        home_team = match["home_team"]
        away_team = match["away_team"]
        date_time = f"{match['date'].date()} {match['time']}"
        button_text = f"{home_team} vs {away_team} ({date_time})"
        callback_data = f"predict_{home_team}_{away_team}_{match['date'].date()}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await query.edit_message_text(
        text=f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ <b>{league}</b>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def metrics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º."""
    metrics_files = {
        "Gradient Boosting": "gradient_boosting_metrics.json",
        "Logistic Regression": "logistic_regression_metrics.json",
        "Random Forest": "random_forest_metrics.json",
        "XGBoost": "xgboost_metrics.json",
    }

   # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    response = (
        "<b>üìä –ú–ï–¢–†–ò–ö–ò –ú–û–î–ï–õ–ï–ô</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    )

    for model, file in metrics_files.items():
        try:
            with open(f"{api.metrics_dir}/{file}", "r") as f:
                metrics = json.load(f)
                response += (
                    f"<b>üîç {model}</b>\n"
                    f"  ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: <code>{metrics['accuracy']:.4f}</code>\n"
                    f"  ‚≠ê F1-–º–µ—Ä–∞: <code>{metrics['f1']:.4f}</code>\n"
                    f"  üìà ROC-AUC: <code>{metrics['roc_auc']:.4f}</code>\n"
                    f"  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                )
        except FileNotFoundError:
            response += f"‚ùå <b>{model}</b>: –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–Ω—Ü–µ
    response += (
        "<b>üí° –ü–û–Ø–°–ù–ï–ù–ò–ï –ú–ï–¢–†–ò–ö</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "‚úÖ <b>–¢–æ—á–Ω–æ—Å—Ç—å</b>: –¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ (0,4-0,5: —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º.)\n\n"
        "‚≠ê <b>F1-–º–µ—Ä–∞</b>: –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø–æ–ª–Ω–æ—Ç–æ–π (0,4-0,5: —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å F1-–º–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º.)\n\n"
        "üìà <b>ROC-AUC</b>: —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ —Ä–∞–∑–ª–∏—á–∞—Ç—å –∫–ª–∞—Å—Å—ã (—á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ)\n"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await update.message.reply_html(response)

async def help_command(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    await update.message.reply_text(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/leagues - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–≥\n"
        "/matches - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π\n"
        "/predict <–∫–æ–º–∞–Ω–¥–∞_–¥–æ–º–∞> <–∫–æ–º–∞–Ω–¥–∞_–≥–æ—Å—Ç–µ–π> - –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞\n"
        "/metrics - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç message
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    elif update and hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    token = "TOKEN"
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("leagues", leagues_command))
    application.add_handler(CommandHandler("matches", matches_command))
    application.add_handler(CommandHandler("predict", predict_command))
    application.add_handler(CommandHandler("metrics", metrics_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(league_handler, pattern="^league_"))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Starting the bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()